package main;

import java.util.ArrayList;
import ast.*;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "cool.grammar".
 */
public class CoolParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pbcGkSrKKLny$$ldONbu14ILfsNLugYi3AStdAsqqDD9EqJB8LDCrI8Sr7a9AQcc5gPYg" +
		"Ahx820NbOfWL90LPOgJmAyfNuugbY2epVEJF$U#VkNc0teG$gFP$V#SqvSyxCcPd$tl$z$r" +
		"SaiyCyuiLOBNV9AEMcgajb5leRSgoSAkV941SfDMOcEYMrqjdCb4$9D#KWEL8cIChia2$AL" +
		"sIsZ9I9yYsvI2wMf8sMCcb7z7WVVHSyGTBILAEdvwBDDaPeej4$8$hvKAH8Jb0#KVKzSZVw" +
		"v$9J6M6hyr5R6E7vx8h#xRHVqUMgfyfaUAPPAzCaOzQ6ApARfTPiaSkrngjbCZLUOrwqDQ9" +
		"pDVvBIgIxhP7MUFDSdcmsBoYhblka6ErsRvWyu69qhkVa5ymrHtwfS$sOrWIpLMxM$PWNpF" +
		"Msr4WYktlRRRIPOTwYicPe6zqyYDvgLihrMjbAiqP#W5vftZPhy7v2MgcrNRMAV8#nMsYh5" +
		"lscZlsc7C3OdvJzTTMl1cE$ObRBM1rxjVIMDcOrN26LwFRIKQt3hNOYdSmg#QwsLs4TWLub" +
		"NQGFkbhwgTNNQY$$b07IoxN08YVILVKeELxviwg$9FkXJ#FKZz5JN#HZlYp7cOLEPApgC#I" +
		"hogDKJpMpuPaoJgQPsNAsZpoBirWetvPpsDsloTVrB2wGxx03aymitO67WYlvCtgETWT#xq" +
		"IkK7sbNANsVzJwljc4ljPiabEqGXTvdVmG$fsNbwoM6#H6vH#fRvFPuFKckKbkyP7hv5Rqu" +
		"qxa9yelonrgtQdM1hFUwmrohtdTnxvdNaC$veGziFf#yr#rtr6zthpXzNhphZpe8tybC#3V" +
		"Ef6PgX#IESeFg$SD4TLpjRN2nwvGxmhBrkkqUbV48fBrre0BCMhLPNVTVYQejjUq1BlkFdR" +
		"N7tN26AfZzdgZqtwMHuEONpkXhJfczMvKtXXdnf7Q#eqJsgfZpbd#BtkCysLZ5ZYXhJhcd2" +
		"NPJnofhVbEQAkEEMS5UVE3c7bEQAkEEMS5UVE2cBbEQAkEEMTbqsfyPArwTtTUDUwy6dYw7" +
		"uzeST5ccHFsKNNCEIiugsKoNBvW$kG4MtNCEIl8SB5FEC5M7NFE2Z9Sx1#SOAkEEMTb4sfy" +
		"PEDMlTG98wcEEMS55ItLLV$H2RRgc7DMK96BR5n5IvmmakgOSrPGqHAjQB4JRDKnvwoW8XV" +
		"Pg8golx4#BoV9KNAe39HFInLztQJ7JllEt4NVb9tsrSZjzCNVlgVlihuQNs53OaysVxR2Ng" +
		"YEEMS5emtTepFlhTYJpPDMg5rrp3bhdrXHUCe7#bCEVPTud$sqpEjf7VI8ZCxhAoymqi45V" +
		"6qB#3eKy1rImDUpWA#$yvdbLjXZrJ77bWpEo$cSp$cB5Q9KnnnRTNBEBJ3t#NwSlreXKtNC" +
		"iLLddDjypbDMY5ATvK5ogVcx5JogBSjXvczMQAjsR1wsGbkrO$Ei5TggbP#nGakryjDMQAb" +
		"M$eSLMgej1nKV7RGlauYdYoHFSY8Pdg#wyMJJHFRZsw4fJmozwMcXvtQOT9B3fHNVPGTfHf" +
		"bKylIM8AEOZ7PmAHwHPZoDjD6dXvOyHnmelJIwDRkSnk#Ykz4kvUhgeT6zWsXXZ44QtOtek" +
		"BAqLbPDsrQMqSewqjU2iTA#EbUPpI$BvYKrB#DNLAnvRPYv1LTnagks3ttXYeJHAecpDIQ9" +
		"AwK$gJLcWXeJHAMqng9wDLRcrLWkVOFTwv0tLr9tBwDpLUZkfTb5ErUlOAuqqGEpkoSQFK9" +
		"hAoRNHlSBeZiIdVJH2R#EZZhsmSnkeok3w1AYAx9Z9pKwmqhioRXAKa5qYkYgR7I9twCcH9" +
		"VuFKe7qOE9Bif63z3edkXIPdHZb#VjQAh0ZhRN7RKpsHsjqXqjqrClhdFg9VJcJhrAyyfXc" +
		"rVYJpsXfvxWr8kemUKLasDFeXtZbPFfrbIXEz1UgsmVLEbcj5N6C$NKcThpsy3ELA4p5UjC" +
		"5NKgB4To5LPeNeLVsR2y2jDKcCfUAwcyl7QQbyAoUQbwUKDWbvUcbSihqRmgl3OlNIylpPt" +
		"BvRMXfhfrbliwtVhQ6ADvvTAMLXJFHxlCxf$X8wMgsJzqTl#CVlp#SRtHJgkduLbQ5HPLgP" +
		"Ugq5I5PZNnYB1MfQsoNUN5gq6tRKoUMjc$xCRccUpdmv7Nk5EMo9zNWqxtun7Ti6kuq5djM" +
		"ndXbR1lhFeZKr7kDzOHqbcEb2xILRhHTvHqtxDzr4UVQT2thxtArT#WsDr#NsP7arPxTkQz" +
		"5VkXM56XKoxWqzp#E#kXx#Y6ZlH$yJNmtlk1S$Rwt8LwFe3lV$E45OTjaVcJxDEXCUz1zXc" +
		"m8oW79m7xXkWcC1oS8X9Ptvdm$R1zPhNFibl0Ml0QU1dmd1qbmK9G0fff1P9ipkFbau3dqw" +
		"W5zY5mQtW0t19cxCmQsgredmDJG$8AV8oPcO5T0I#0EuXzLoOPnXSRTwZOzsiYzitxA#0My" +
		"1BOHjz0i3$e38Y9U8AA3c3Sss0xRoV6kPjbRuMFuU6lAMW7kXCp5ww1MK$wT9WwqXFT5aKZ" +
		"m4Z0laHdWCjmdW2EfP$nvMp6mv##3jo1hoiy1sQEw5PG3KQ3CS0#vu#7buFZWDtVr$5DXYy" +
		"KIHJ34u3T$rfm6kE0Y6DBi9xKnU16shtnNGcV2Cu3ru87m2B0#IJi#Tu9BgAM9THt5V5d0R" +
		"k7um0r2sD6by9TOFkswKLmDUqfO1fWpCXU3wmhidl8sgARiU#5xNyAfiDF07kEzu6bO1QOJ" +
		"OtK4jat4VFXPy4Ay2vO3EmRR#P8Z8LlmERyedLW8#3wYZXBdib4x7z97iVcd2EkgMWzs8pF" +
		"lWLXJGbxlRq5jWFxqkFfIUwjrbGkmNSckGNQZtrFnxKd5tYxcFvduluWxfvyE$r8WPWNy2#" +
		"l4xV6yphFcuE#ROupcM0C7oTR0jyEnwdRwy#PQLxN5$IrhcCliypwNlNZNkEvZ#Eek#Tpy$" +
		"EYIb$lec2ixlanYOa#TahzEgAkddi6lcg$fWTtKV$n1NnZTXPV8FQfmlved9zxWRTFRUYOF" +
		"lwINSnvlXzxyMx6cEvvOHt$Ousf9PUddz4oGjyH9K0alVWbKasxclOGU0ZSXxj17zf3kHyC" +
		"vGkiBtPVx46AI7fB2KWfUc1RzFSOHimm$Ft8wKTxEECFfrsbIF2R8GdiByeO2Nvt9a4niEq" +
		"Yxf19476FB09f477FJ8A8RvgaHyJTA0aYxaj9ZuYxLD8ZuhwLy8YuWwL0n7qi1H8W6I3olg" +
		"WU1jC$W1e6wDkR98ZuHImoydq6u$ML");

	private final Action[] actions;

	public CoolParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = program
			new Action() {	// [1] program = program.p classdecl.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final Program p = (Program) _symbol_p.value;
					final Symbol _symbol_c = _symbols[offset + 2];
					final ClassDecl c = (ClassDecl) _symbol_c.value;
					
                                      p.add(c);
                                      return _symbol_p;
				}
			},
			new Action() {	// [2] program = classdecl.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ClassDecl c = (ClassDecl) _symbol_c.value;
					 
                                      ArrayList classlist = new ArrayList();
                                      classlist.add(c);
                                      return new Program(classlist);
				}
			},
			new Action() {	// [3] classdecl = CLASS TYPE.t varformals.vf classdeclopts.ext classbody.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_vf = _symbols[offset + 3];
					final ClassVarFormals vf = (ClassVarFormals) _symbol_vf.value;
					final Symbol _symbol_ext = _symbols[offset + 4];
					final Extension ext = (Extension) _symbol_ext.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final ClassBody b = (ClassBody) _symbol_b.value;
					
                                      return new ClassDecl(t, vf, ext, b);
				}
			},
			new Action() {	// [4] classdeclopts = EXTENDS extension.ext
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ext = _symbols[offset + 2];
					final Extension ext = (Extension) _symbol_ext.value;
					
                                      return _symbol_ext;
				}
			},
			new Action() {	// [5] classdeclopts = empty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new Extension();
				}
			},
			new Action() {	// [6] extension = TYPE.t actuals.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_a = _symbols[offset + 2];
					final Actuals a = (Actuals) _symbol_a.value;
					
                                      return new Extension(t, a);
				}
			},
			new Action() {	// [7] extension = NATIVE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new Extension("native");
				}
			},
			new Action() {	// [8] varformals = LPAREN varformalsdecl.vf RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_vf = _symbols[offset + 2];
					final ClassVarFormals vf = (ClassVarFormals) _symbol_vf.value;
					
                                      return _symbol_vf;
				}
			},
			new Action() {	// [9] varformals = LPAREN RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new ClassVarFormals();
				}
			},
			new Action() {	// [10] varformalsdecl = varformalsdecl.vf COMMA VAR ID.i COLON TYPE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_vf = _symbols[offset + 1];
					final ClassVarFormals vf = (ClassVarFormals) _symbol_vf.value;
					final Symbol _symbol_i = _symbols[offset + 4];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 6];
					final String t = (String) _symbol_t.value;
					
                                      vf.add(new ClassFormal(i,t));
                                      return _symbol_vf;
				}
			},
			new Action() {	// [11] varformalsdecl = VAR ID.i COLON TYPE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final String t = (String) _symbol_t.value;
					
                                      ArrayList fvlist = new ArrayList();
                                      fvlist.add(new ClassFormal(i,t));
                                      return new ClassVarFormals(fvlist);
				}
			},
			new Action() {	// [12] classbody = LBRACE featuredecl.b RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_b = _symbols[offset + 2];
					final ClassBody b = (ClassBody) _symbol_b.value;
					  
                                      return _symbol_b;
				}
			},
			new Action() {	// [13] classbody = LBRACE RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new ClassBody();
				}
			},
			new Action() {	// [14] featuredecl = featuredecl.b feature.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_b = _symbols[offset + 1];
					final ClassBody b = (ClassBody) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 2];
					final Feature f = (Feature) _symbol_f.value;
					
                                      b.add(f);
                                      return _symbol_b;
				}
			},
			new Action() {	// [15] featuredecl = feature.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 1];
					final Feature f = (Feature) _symbol_f.value;
					
                                      ArrayList featlist = new ArrayList();
                                      featlist.add(f);
                                      return new ClassBody(featlist);
				}
			},
			new Action() {	// [16] feature = optoverride.o DEF ID.i formals.fo COLON TYPE.t ASSIGN exprornative.e SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_o = _symbols[offset + 1];
					final String o = (String) _symbol_o.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_fo = _symbols[offset + 4];
					final MethodVarFormals fo = (MethodVarFormals) _symbol_fo.value;
					final Symbol _symbol_t = _symbols[offset + 6];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_e = _symbols[offset + 8];
					final ExprOrNative e = (ExprOrNative) _symbol_e.value;
					
                                      return new Feature(new MethodFeature(o, i, fo, t, e));
				}
			},
			new Action() {	// [17] feature = VAR ID.i nativeortype.nt SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_nt = _symbols[offset + 3];
					final NativeOrType nt = (NativeOrType) _symbol_nt.value;
					
                                      return new Feature(new VarFeature(i, nt));
				}
			},
			new Action() {	// [18] feature = LBRACE block.bl RBRACE SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bl = _symbols[offset + 2];
					final Block bl = (Block) _symbol_bl.value;
					
                                      return new Feature(new BlockFeature(bl));
				}
			},
			new Action() {	// [19] optoverride = OVERRIDE.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					
                                      return o;
				}
			},
			new Action() {	// [20] optoverride = empty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new Symbol("");
				}
			},
			new Action() {	// [21] exprornative = expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					
                                      return new ExprOrNative(e);
				}
			},
			new Action() {	// [22] exprornative = NATIVE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new ExprOrNative();
				}
			},
			new Action() {	// [23] nativeortype = ASSIGN NATIVE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new NativeOrType();
				}
			},
			new Action() {	// [24] nativeortype = COLON TYPE.t ASSIGN expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expr e = (Expr) _symbol_e.value;
					
                                      return new NativeOrType(t,e);
				}
			},
			new Action() {	// [25] formals = LPAREN formalsdecl.fo RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fo = _symbols[offset + 2];
					final MethodVarFormals fo = (MethodVarFormals) _symbol_fo.value;
					
                                      return _symbol_fo;
				}
			},
			new Action() {	// [26] formals = LPAREN RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new MethodVarFormals();
				}
			},
			new Action() {	// [27] formalsdecl = formalsdecl.fo COMMA ID.i COLON TYPE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fo = _symbols[offset + 1];
					final MethodVarFormals fo = (MethodVarFormals) _symbol_fo.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 5];
					final String t = (String) _symbol_t.value;
					
                                      fo.add(new MethodFormal(i, t));
                                      return _symbol_fo;
				}
			},
			new Action() {	// [28] formalsdecl = ID.i COLON TYPE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
                                      ArrayList mflist = new ArrayList();
                                      mflist.add(new MethodFormal(i, t));
                                      return new MethodVarFormals(mflist);
				}
			},
			new Action() {	// [29] actuals = LPAREN actualsdecl.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Actuals a = (Actuals) _symbol_a.value;
					
                                      return _symbol_a;
				}
			},
			new Action() {	// [30] actuals = LPAREN RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new Actuals(new ArrayList());
				}
			},
			new Action() {	// [31] actualsdecl = actualsdecl.a COMMA expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Actuals a = (Actuals) _symbol_a.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					
                                      a.add(e);
                                      return _symbol_a;
				}
			},
			new Action() {	// [32] actualsdecl = expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					
                                      ArrayList exprlist = new ArrayList();
                                      exprlist.add(e);
                                      return new Actuals(exprlist);
				}
			},
			new Action() {	// [33] block = empty
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new Block();
				}
			},
			new Action() {	// [34] block = expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					
                                      ArrayList bi = new ArrayList();
                                      bi.add(new BlockItem(e));
                                      return new Block(bi);
				}
			},
			new Action() {	// [35] block = blockdecl.bd expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bd = _symbols[offset + 1];
					final Block bd = (Block) _symbol_bd.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					
                                      bd.add(new BlockItem(e));
                                      return _symbol_bd;
				}
			},
			new Action() {	// [36] blockdecl = blockdecl.bd expr.e SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bd = _symbols[offset + 1];
					final Block bd = (Block) _symbol_bd.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					
                                      bd.add(new BlockItem(e));
                                      return _symbol_bd;
				}
			},
			new Action() {	// [37] blockdecl = blockdecl.bd VAR ID.i COLON TYPE.t ASSIGN expr.e SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bd = _symbols[offset + 1];
					final Block bd = (Block) _symbol_bd.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 5];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_e = _symbols[offset + 7];
					final Expr e = (Expr) _symbol_e.value;
					
                                      bd.add(new BlockItem(i, t, e));
                                      return _symbol_bd;
				}
			},
			new Action() {	// [38] blockdecl = expr.e SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					
                                      ArrayList bi = new ArrayList();
                                      bi.add(new BlockItem(e));
                                      return new Block(bi);
				}
			},
			new Action() {	// [39] blockdecl = VAR ID.i COLON TYPE.t ASSIGN expr.e SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_e = _symbols[offset + 6];
					final Expr e = (Expr) _symbol_e.value;
					
                                      ArrayList bi = new ArrayList();
                                      bi.add(new BlockItem(i, t, e));
                                      return new Block(bi);
				}
			},
			new Action() {	// [40] expr = ID.id ASSIGN expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					
                                      return new AssignExpr(id, e);
				}
			},
			Action.RETURN,	// [41] expr = ifwhile
			new Action() {	// [42] ifwhile = IF LPAREN expr.e1 RPAREN expr.e2 ELSE expr.e3
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final Expr e2 = (Expr) _symbol_e2.value;
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final Expr e3 = (Expr) _symbol_e3.value;
					
                                      return new IfExpr(e1, e2, e3);
				}
			},
			new Action() {	// [43] ifwhile = WHILE LPAREN expr.e4 RPAREN expr.e5
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e4 = _symbols[offset + 3];
					final Expr e4 = (Expr) _symbol_e4.value;
					final Symbol _symbol_e5 = _symbols[offset + 5];
					final Expr e5 = (Expr) _symbol_e5.value;
					
                                      return new WhileExpr(e4, e5);
				}
			},
			Action.RETURN,	// [44] ifwhile = match
			new Action() {	// [45] match = match.m MATCH cases.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final Expr m = (Expr) _symbol_m.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final Cases c = (Cases) _symbol_c.value;
					
                                      return new MatchExpr(m, c);
				}
			},
			Action.RETURN,	// [46] match = comparison
			new Action() {	// [47] comparison = comparison.c1 LE equals.e1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c1 = _symbols[offset + 1];
					final Expr c1 = (Expr) _symbol_c1.value;
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final Expr e1 = (Expr) _symbol_e1.value;
					
                                      return new LeExpr(c1, e1);
				}
			},
			new Action() {	// [48] comparison = comparison.c2 LT equals.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c2 = _symbols[offset + 1];
					final Expr c2 = (Expr) _symbol_c2.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					
                                      return new LtExpr(c2, e2);
				}
			},
			Action.RETURN,	// [49] comparison = equals
			new Action() {	// [50] equals = equals.e EQUALS plusminus.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final Expr p = (Expr) _symbol_p.value;
					
                                      return new EqualsExpr(e, p);
				}
			},
			Action.RETURN,	// [51] equals = plusminus
			new Action() {	// [52] plusminus = plusminus.p1 PLUS timesdiv.t1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p1 = _symbols[offset + 1];
					final Expr p1 = (Expr) _symbol_p1.value;
					final Symbol _symbol_t1 = _symbols[offset + 3];
					final Expr t1 = (Expr) _symbol_t1.value;
					
                                      return new PlusExpr(p1, t1);
				}
			},
			new Action() {	// [53] plusminus = plusminus.p2 MINUS timesdiv.t2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p2 = _symbols[offset + 1];
					final Expr p2 = (Expr) _symbol_p2.value;
					final Symbol _symbol_t2 = _symbols[offset + 3];
					final Expr t2 = (Expr) _symbol_t2.value;
					
                                      return new MinusExpr(p2, t2);
				}
			},
			Action.RETURN,	// [54] plusminus = timesdiv
			new Action() {	// [55] timesdiv = timesdiv.t1 TIMES notneg.n1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t1 = _symbols[offset + 1];
					final Expr t1 = (Expr) _symbol_t1.value;
					final Symbol _symbol_n1 = _symbols[offset + 3];
					final Expr n1 = (Expr) _symbol_n1.value;
					
                                      return new MultExpr(t1, n1);
				}
			},
			new Action() {	// [56] timesdiv = timesdiv.t2 DIV notneg.n2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t2 = _symbols[offset + 1];
					final Expr t2 = (Expr) _symbol_t2.value;
					final Symbol _symbol_n2 = _symbols[offset + 3];
					final Expr n2 = (Expr) _symbol_n2.value;
					
                                      return new DivExpr(t2, n2);
				}
			},
			Action.RETURN,	// [57] timesdiv = notneg
			new Action() {	// [58] notneg = NOT notneg.n1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n1 = _symbols[offset + 2];
					final Expr n1 = (Expr) _symbol_n1.value;
					
                                      return new NotExpr(n1);
				}
			},
			new Action() {	// [59] notneg = MINUS notneg.n2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n2 = _symbols[offset + 2];
					final Expr n2 = (Expr) _symbol_n2.value;
					
                                      return new NegExpr(n2);
				}
			},
			Action.RETURN,	// [60] notneg = dotcall
			new Action() {	// [61] dotcall = dotcall.d DOT ID.id actuals.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final Expr d = (Expr) _symbol_d.value;
					final Symbol _symbol_id = _symbols[offset + 3];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_a = _symbols[offset + 4];
					final Actuals a = (Actuals) _symbol_a.value;
					
                                      return new DotExpr(d, id, a);
				}
			},
			Action.RETURN,	// [62] dotcall = primary
			new Action() {	// [63] primary = SUPER DOT ID.id actuals.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 3];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_a = _symbols[offset + 4];
					final Actuals a = (Actuals) _symbol_a.value;
					
                                      return new PrimaryExpr("supercall", id, a);
				}
			},
			new Action() {	// [64] primary = ID.id actuals.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_a = _symbols[offset + 2];
					final Actuals a = (Actuals) _symbol_a.value;
					
                                      return new PrimaryExpr("call", id, a);
				}
			},
			new Action() {	// [65] primary = NEW TYPE.t actuals.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 2];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final Actuals a = (Actuals) _symbol_a.value;
					
                                      return new PrimaryExpr("new", t, a);
				}
			},
			new Action() {	// [66] primary = LBRACE block.bl RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_bl = _symbols[offset + 2];
					final Block bl = (Block) _symbol_bl.value;
					
                                      return new PrimaryExpr("block", bl);
				}
			},
			new Action() {	// [67] primary = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					
                                      return new PrimaryExpr("parenexpr", e);
				}
			},
			new Action() {	// [68] primary = NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new PrimaryExpr("null");
				}
			},
			new Action() {	// [69] primary = LPAREN RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new PrimaryExpr("empty");
				}
			},
			new Action() {	// [70] primary = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					
                                      return new PrimaryExpr("id", id);
				}
			},
			new Action() {	// [71] primary = INTEGER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					
                                      return new PrimaryExpr("integer", i);
				}
			},
			new Action() {	// [72] primary = STRING.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					
                                      return new PrimaryExpr("string", s);
				}
			},
			new Action() {	// [73] primary = BOOLEAN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_b = _symbols[offset + 1];
					final String b = (String) _symbol_b.value;
					
                                      return new PrimaryExpr("boolean", b);
				}
			},
			new Action() {	// [74] primary = THIS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new PrimaryExpr("this");
				}
			},
			new Action() {	// [75] cases = LBRACE casesdecl.cd RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cd = _symbols[offset + 2];
					final Cases cd = (Cases) _symbol_cd.value;
					
                                      return _symbol_cd;
				}
			},
			new Action() {	// [76] casesdecl = casesdecl.cd CASE idornull.ion ARROW block.bl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_cd = _symbols[offset + 1];
					final Cases cd = (Cases) _symbol_cd.value;
					final Symbol _symbol_ion = _symbols[offset + 3];
					final IdOrNull ion = (IdOrNull) _symbol_ion.value;
					final Symbol _symbol_bl = _symbols[offset + 5];
					final Block bl = (Block) _symbol_bl.value;
					
                                      cd.add(new Case(ion, bl));
                                      return _symbol_cd;
				}
			},
			new Action() {	// [77] casesdecl = CASE idornull.ion ARROW block.bl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ion = _symbols[offset + 2];
					final IdOrNull ion = (IdOrNull) _symbol_ion.value;
					final Symbol _symbol_bl = _symbols[offset + 4];
					final Block bl = (Block) _symbol_bl.value;
					
                                      ArrayList clist = new ArrayList();
                                      clist.add(new Case(ion, bl));
                                      return new Cases(clist);
				}
			},
			new Action() {	// [78] idornull = ID.id COLON TYPE.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					
                                      return new IdOrNull(id, t);
				}
			},
			new Action() {	// [79] idornull = NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					
                                      return new IdOrNull();
				}
			},
			Action.NONE	// [80] empty = 
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
